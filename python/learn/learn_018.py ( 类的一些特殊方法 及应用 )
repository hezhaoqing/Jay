形如__xxx__的变量或者函数名在Python中是有特殊用途的

********
__str__                                                ### 定义此方法，就是定义在直接打印一个实例如print(Student('jay'))时的输出，而不是默认输出打印内存地址等等。
__repr__                                               ### 此方法，则是定义在把实例赋予一个变量如s=Student('jay');print(s)时的输出
********

class Student(object):
    def __init__(self, name):
        self.name = name
    def __str__(self):                  
        return 'Student object (name: %s)' % self.name
    __repr__ = __str__                                 ### 这样写，代表两者相同的定义，所以下列结果相同，
    
print(Student('jay'))                                  ### Student object (name: jay)

s=Student('jay')
print s                                                ### Student object (name: jay)



***********
__getattr__                                            ### 此方法，动态返回一个属性，
***********                                                当调用不存在的属性时，Python解释器会试图调用__getattr__(self, 'xxx')来尝试获得属性

利用完全动态的__getattr__写出一个链式调用：
class Chain(object):
    def __init__(self, path=''):
        self._path = path
    def __getattr__(self, path):
        return Chain('%s/%s' % (self._path, path))
    def __str__(self):
        return self._path
    __repr__ = __str__
    
 print(Chain('http://wwww.baidu.com').xxx)             ### 返回http://wwww.baidu.com/xxx
 print(Chain('http://wwww.baidu.com').xxx.yyy)         ### 返回http://wwww.baidu.com/xxx/yyy
 print(Chain('http://wwww.baidu.com').xxx.yyy.zzz)     ### 返回http://wwww.baidu.com/xxx/yyy/zzz
 无论API怎么变，SDK都可以根据URL实现完全动态的调用，而且，不随API的增加而改变！
 
 
 
 
 
