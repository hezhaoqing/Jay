为枚举类型定义一个class类型，每个常量都是class的一个唯一实例。
Python提供了Enum类实现这个功能：
from enum import Enum
Month = Enum('Month', ('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'))
print(Month(10))                                       ### Month.Oct
print(Month['Oct'])                                    ### Month.Oct
j=Month.Oct
print(j)                                               ### Month.Oct
print(j.value)                                         ### 10
### 枚举它的所有成员：
for name, member in Month.__members__.items():
    print(name, ',', member, ',', member.value)        ### value属性是自动赋给成员的int常量，默认从1开始计数。




从Enum派生出自定义类：
from enum import Enum, unique
@unique                                                ### @unique装饰器可以帮助我们检查保证没有重复值。
class Weekday(Enum):
    Sun = 0                                            ### Sun的value设定为0
    Mon = 1
    Tue = 2
    Wed = 3
    Thu = 4
    Fri = 5
    Sat = 6




例如把‘性别’属性改造成枚举类型来避免使用字符串。
#!/bin/env python
from enum import Enum, unique
@unique
class Gender(Enum):
    Male = 0
    Female = 1
    
class Student(object):
    def __init__(self, name, gender):
        self.name = name
        if isinstance(gender,Gender):
            self.gender = gender
        else:
            raise ValueError('只允许接收Gender类型的参数')

jay = Student('Jay', Gender['Male'])                 ### 参照上面得出另外写法：Gender.Male \ Gender(0) \ Gender(Gender.Male.value))
if jay.gender == Gender.Male:
    print('测试通过!')
else:
    print('测试失败!')
