与时间相关的模块有：time,datetime,calendar

概念：时间元组
【time.struct_time】
如：
time.struct_time(tm_year=1970, tm_mon=1, tm_mday=1, tm_hour=8, tm_min=0, tm_sec=0, tm_wday=3, tm_yday=1, tm_isdst=0)
索引 	  属性          值
0 	tm_year(年) 	(例如:2015)
1 	tm_mon(月) 	1-12
2 	tm_mday(日) 	1-31
3 	tm_hour(时) 	0-23
4 	tm_min(分) 	0-59
5 	tm_sec(秒) 	0-61(60代表闰秒,61是基于历史原因保留)
6 	tm_wday(星期几) 	0-6(0表示星期一)
7 	tm_yday(一年中的第几天) 	1-366
8 	tm_isdst(是否为夏令时) 	0,1,-1(-1代表夏令时)



函数：
print(time.time())            ### 返回当前UTC时间的【时间戳】
print(time.localtime())       ### 返回UTC+8的时间元组，可传入时间戳。如传入0，返回1970.01.01 08:00:00
print(time.gmtime())          ### 返回UTC时间的时间元组，可传入时间戳。如传入0，则返回1970.01.01 00:00:00

time.sleep()                  ### 相当于shell中的sleep 1.

print(time.strptime())        ### 返回指定时间格式的时间元组，需要传入字符串如'Thu Jul 12 17:20:15 2018'，或('2018-07-16 11:05:26',"%Y-%m-%d %H:%M:%S")
print(time.strftime())        ### 返回指定时间元组的指定格式，需要传入字符串如"%Y-%m-%d %H:%M:%S"，详见下文。

time.strftime(format[,t])
把一个代表时间的元组或者struct_time(如由time.localtime()和time.gmtime()返回)转化为格式化的时间字符串．
如果t未指定，将传入time.localtime()，如果元组中任一个元素越界，将会抛出ValueError异常
format格式如下：
    %a      本地(local)简化星期名称
    %A      本地完整星期名称
    %b      本地简化月份名称
    %B      本地完整月份名称
    %c      本地相应的日期和时间表示
    %d      一个月中的第几天(01-31)
    %H      一天中的第几个小时(24小时制，00-23)
    %l      一天中的第几个小时(12小时制，01-12)
    %j      一年中的第几天(01-366)
    %m      月份(01-12)
    %M      分钟数(00-59)
    %p      本地am或者pm的相应符
    %S      秒(01-61)
    %U      一年中的星期数(00-53,星期天是一个星期的开始,第一个星期天之前的所有天数都放在第０周)
    %w      一个星期中的第几天(0-6,0是星期天)
    %W      和%U基本相同，不同的是%W以星期一为一个星期的开始
    %x      本地相应日期
    %X      本地相应时间
    %y      去掉世纪的年份(00-99)
    %Y      完整的年份       
    %z      用+HHMM或者-HHMM表示距离格林威治的时区偏移(H代表十进制的小时数，M代表十进制的分钟数)
    %Z      时区的名字(如果不存在为空字符)
    %%      %号本身
            %p只有与%I配合使用才有效果
            当使用strptime()函数时，只有当在这年中的周数和天数被确定的时候%U和%W才会被计算


